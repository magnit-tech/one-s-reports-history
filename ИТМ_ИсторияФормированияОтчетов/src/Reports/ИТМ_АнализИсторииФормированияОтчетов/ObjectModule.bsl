// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область УРБД

// Инициализация отчета перед формированием.
Процедура ИнициализацияОтчета() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Поиск и загрузка настроек варианта отчета.
// 
// Параметры:
//		КлючВарианта - Строка - ключ варианта настройки которого необходимо загрузить. 
//		
// Возвращаемое значение: 
//		Булево - Истина если настройка найдена и загружена, Ложь - иначе.
Функция ЗагрузитьНастройку(КлючВарианта) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Установить параметр.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек
//  Ключ - Строка - Ключ
//  Значение - Произвольный - Значение
Процедура УстановитьПараметр(КомпоновщикНастроек, Ключ, Знач Значение) Экспорт

	ТипЗначения = ТипЗнч(Значение);
	Если Ключ = "ПодсистемыКонфигурации" И ТипЗначения = Тип("Строка") Тогда
		НовоеЗначение = Новый СписокЗначений; //СписокЗначений из СправочникСсылка.ИдентификаторыОбъектовМетаданных
		Для Каждого ИмяПодсистемы Из СтрРазделить(Строка(Значение), ",", Ложь) Цикл
			ПолноеИмяПодсистемы = "." + ИмяПодсистемы;
			ПолноеИмяПодсистемы = СтрЗаменить(ПолноеИмяПодсистемы, ".", "Подсистема.");
			Попытка
				НовоеЗначение.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяПодсистемы));
			Исключение
				ДобавитьСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		Значение = НовоеЗначение;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных(Ключ)); //см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ЗначениеПараметраКомпоновкиДанных
	Если Не ЗначениеПараметра = Неопределено Тогда
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
	КонецЕсли;

КонецПроцедуры

// Сформировать отчет.
// 
// Параметры:
//  Результат - Неопределено, ТабличныйДокумент - Результат
//  ДанныеРасшифровки - Неопределено, ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//  ВыводВФормуОтчета - Булево - Вывод в форму отчета
Процедура СформироватьОтчет(Результат = Неопределено,
	ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	СкомпоноватьРезультат(Результат, ДанныеРасшифровки);
	
КонецПроцедуры

// Возвращает таблицу сообщений с логом выполнения действий обработки
//	Сообщения бывают двух видов - сообщения о ходе процесса (у них есть даты начала и окончания) и сообщения о событиях - у них есть только дата начала
//
// Возвращаемое значение:
//   ТаблицаЗначений   - содержимое табличной части Сообщения
//
Функция ПолучитьСообщения() Экспорт

	Возврат Сообщения.Выгрузить(, "Начало, Окончание, Комментарий, ЭтоИсключение");

КонецФункции

// Добавить сообщение.
// 
// Параметры:
//  Комментарий - Строка - Комментарий
//  ЭтоИсключение - Булево - Это исключение
Процедура ДобавитьСообщение(Комментарий, ЭтоИсключение = Ложь) Экспорт
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Сообщения.Добавить();
	НоваяСтрока.Начало = ТекущаяДатаСеанса();
	НоваяСтрока.Комментарий = СокрЛП(Комментарий);
	НоваяСтрока.ЭтоИсключение = ЭтоИсключение;
	
	ОбщегоНазначения.СообщитьПользователю(НоваяСтрока.Комментарий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// При компоновке результата.
// 
// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//  СтандартнаяОбработка - Булево
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	ВнешниеНаборыДанных = Новый Структура;
	ЗаполнитьПодсистемыОтчетов(ВнешниеНаборыДанных);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВозможностьИспользованияВнешнихФункций", Истина);
	ДополнительныеПараметры.Вставить("ПроверятьДоступностьПолей", Ложь);
	ДополнительныеПараметры.Вставить("ОграничиватьПолучениеПолейПоСсылкамПоПравуПросмотр", Ложь);
	
	СкомпоноватьРезультатОтчета(ДокументРезультат, СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, ВнешниеНаборыДанных, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнить подсистемы отчетов.
// 
// Параметры:
//  ВнешниеНаборыДанных - Структура
Процедура ЗаполнитьПодсистемыОтчетов(ВнешниеНаборыДанных)
	
	НастройкиКомпоновки    = КомпоновщикНастроек.ПолучитьНастройки();
	НеобходимыеПодсистемы  = Неопределено;
	
	ОтборПодсистем = НастройкиКомпоновки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ПодсистемыКонфигурации")); //см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ЗначениеПараметраКомпоновкиДанных
	Если ОтборПодсистем = Неопределено ИЛИ НЕ ОтборПодсистем.Использование Тогда
		ОтборПодсистем = Неопределено;
	Иначе
		ОтборПодсистем = ОтборПодсистем.Значение;
		Если НЕ ТипЗнч(ОтборПодсистем) = Тип("СписокЗначений") Тогда
			НовыйОтборПодсистем = Новый СписокЗначений; //СписокЗначений из Неопределено
			НовыйОтборПодсистем.Добавить(ОтборПодсистем);
			ОтборПодсистем = НовыйОтборПодсистем;
		КонецЕсли;
		НеобходимыеПодсистемы = Новый Соответствие;
		Для Каждого ЭлементОтбораПодсистем Из ОтборПодсистем Цикл
			НеобходимыеПодсистемы.Вставить(ЭлементОтбораПодсистем.Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	ЕстьОтборПодсистем   = НеобходимыеПодсистемы <> Неопределено;
	
	НеобходимыПодсистемы = ЕстьОтборПодсистем ИЛИ ИспользуетсяНаборДанных("ПодсистемыОтчетов");
	Если НЕ НеобходимыПодсистемы Тогда
		Возврат;
	КонецЕсли;
	
	ВыводимыеОтчеты   = Новый Массив; //Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных
	ПодсистемыОтчетов = ТаблицаПодсистемыОтчетов();
	ЗаполнитьПодсистемыОтчетов_ОбработатьПодсистемы(ПодсистемыОтчетов, ЕстьОтборПодсистем, НеобходимыеПодсистемы, ВыводимыеОтчеты);
	
	Если ЕстьОтборПодсистем Тогда
		
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.ЗагрузитьЗначения(ВыводимыеОтчеты);
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводимыеОтчеты", СписокОтчетов);
		
	КонецЕсли;
	
	ВнешниеНаборыДанных.Вставить("ПодсистемыОтчетов", ПодсистемыОтчетов);
		
КонецПроцедуры

// Заполнить подсистемы отчетов обработать подсистемы.
// 
// Параметры:
//  ПодсистемыОтчетов - см. ТаблицаПодсистемыОтчетов
//  ЕстьОтборПодсистем - Булево - Есть отбор подсистем
//  НеобходимыеПодсистемы - Неопределено, Соответствие из КлючИЗначение - Необходимые подсистемы
//  ВыводимыеОтчеты - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Выводимые отчеты
Процедура ЗаполнитьПодсистемыОтчетов_ОбработатьПодсистемы(
	ПодсистемыОтчетов, ЕстьОтборПодсистем, НеобходимыеПодсистемы, ВыводимыеОтчеты)
	
	Для Каждого МетаданныеПодсистемы Из Метаданные.Подсистемы Цикл

		ИдентификаторПодсистемы = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеПодсистемы);

		Если ЕстьОтборПодсистем И НеобходимыеПодсистемы.Получить(ИдентификаторПодсистемы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого МетаданныеОтчета Из Метаданные.Отчеты Цикл

			Если НЕ ПринадлежитПодсистеме(МетаданныеОтчета, МетаданныеПодсистемы) Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ПодсистемыОтчетов.Добавить();
			НоваяСтрока.ИдентификаторПодсистемы = ИдентификаторПодсистемы;
			НоваяСтрока.ИдентификаторОтчета     = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОтчета);

			Если ЕстьОтборПодсистем И ВыводимыеОтчеты.Найти(НоваяСтрока.ИдентификаторОтчета) = Неопределено Тогда
				ВыводимыеОтчеты.Добавить(НоваяСтрока.ИдентификаторОтчета);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Функция ПринадлежитПодсистеме(ОбъектМетаданных,ОбъектПодсистема)
	
	Если ОбъектПодсистема.Состав.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВключенВПодсистему = Ложь;
	Для Каждого ВложеннаяПодсистема Из ОбъектПодсистема.Подсистемы Цикл
		ВключенВПодсистему = ПринадлежитПодсистеме(ОбъектМетаданных,ВложеннаяПодсистема);
		Если ВключенВПодсистему Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВключенВПодсистему;
	
КонецФункции

Функция ИспользуетсяНаборДанных(ИмяНабораДанных)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;     
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	Возврат МакетКомпоновки.НаборыДанных.Найти(ИмяНабораДанных) <> Неопределено;
		
КонецФункции

// Таблица подсистемы отчетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
//  * ИдентификаторПодсистемы - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * ИдентификаторОтчета - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция ТаблицаПодсистемыОтчетов()
	
	Возврат ТаблицаЗначенийИзНабораДанных(СхемаКомпоновкиДанных.НаборыДанных.Найти("ПодсистемыОтчетов"));
	
КонецФункции

Функция ТаблицаЗначенийИзНабораДанных(НаборДанных)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для Каждого ПолеНабораДанных Из НаборДанных.Поля Цикл
		ТаблицаЗначений.Колонки.Добавить(ПолеНабораДанных.Поле, 
			ПолеНабораДанных.ТипЗначения, ПолеНабораДанных.Заголовок);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
		
КонецФункции

// Выполняет компоновку СКД по переданным настройкам
//
// Параметры:
//  Результат               - ТабличныйДокумент,ТаблицаЗначений,ДеревоЗначений                      - результат выполнения
//  СхемаКомпоновки         - СхемаКомпоновкиДанных                                                 - выполняемая СКД
//  НастройкиКомпоновки     - НастройкиКомпоновкиДанных,КомпоновщикНастроекКомпоновкиДанных,Строка  - выполняемые настройки или адрес временного хранилища или компоновщик с настройками
//  ДанныеРасшифровки       - ДанныеРасшифровкиКомпоновкиДанных, Неопределено                       - данные расшифровки
//  ВнешниеНаборыДанных     - Структура, Неопределено                                               - коллекция внешних наборов данных
//  ДополнительныеПараметры - Структура, Неопределено                                               - коллекция внешних наборов данных:
//       * МакетОформления              - МакетОформленияКомпоновкиДанных   - Макет оформления, в соответствии с которым необходимо оформлять макет компоновки данных.
//       * ПроверятьДоступностьПолей    - Булево - Определяет, выполнять ли проверку прав на просмотр полей и проверку доступности поля во включенных функциональных возможностях.
//       * ПараметрыФункциональныхОпций - Булево - Содержит параметры функциональных опций, используемые при исполнении отчета.
//       * ВозможностьИспользованияВнешнихФункций - Булево - Указывает возможность использования функции общих модулей конфигурации в выражениях компоновки данных.
//
// SeiOkami: 
//     https://infostart.ru/profile/309462/
//     https://t.me/JuniorOneS
//Подробнее об использовании метода: https://infostart.ru/public/1082944/?ref=1159
//
Процедура СкомпоноватьРезультатОтчета(Результат, СхемаКомпоновки, НастройкиКомпоновки, 
    ДанныеРасшифровки = Неопределено, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
           
    
    //Инициализируем настройки
    ТипПараметраНастроек = ТипЗнч(НастройкиКомпоновки);
	Если ТипПараметраНастроек = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыполняемыеНастройки    = НастройкиКомпоновки.ПолучитьНастройки();
	ИначеЕсли ТипПараметраНастроек = Тип("Строка") И ЭтоАдресВременногоХранилища(НастройкиКомпоновки) Тогда
		ВыполняемыеНастройки    = ПолучитьИзВременногоХранилища(НастройкиКомпоновки); //НастройкиКомпоновкиДанных
	Иначе 
		ВыполняемыеНастройки    = НастройкиКомпоновки;   
	КонецЕсли;
    
	Если НЕ ТипЗнч(ВыполняемыеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
    

	//Инициализируем дополнительные параметры вывода
	ПараметрыВывода    = Новый Структура;
	ПараметрыВывода.Вставить("МакетОформления"                        , Неопределено);
	ПараметрыВывода.Вставить("ПроверятьДоступностьПолей"              , Истина);
	ПараметрыВывода.Вставить("ПараметрыФункциональныхОпций"           , Новый Структура);
	ПараметрыВывода.Вставить("ВозможностьИспользованияВнешнихФункций" , Ложь);
	ПараметрыВывода.Вставить("МенеджерВременныхТаблиц"                , Неопределено);
	ПараметрыВывода.Вставить("ОграничиватьПолучениеПолейПоСсылкамПоПравуПросмотр" , Истина);
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВывода, ДополнительныеПараметры);
	КонецЕсли;
	
	//Определяем тип генератора
	ТипЗначенияРезультата = ТипЗнч(Результат);
	Если ТипЗначенияРезультата = Тип("ТаблицаЗначений") ИЛИ ТипЗначенияРезультата = Тип("ДеревоЗначений") Тогда
		ВыводВКоллекциюЗначений = Истина;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	Иначе
		ВыводВКоллекциюЗначений = Ложь;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанных");
	КонецЕсли;
    
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ВыполняемыеНастройки, 
		ДанныеРасшифровки, ПараметрыВывода.МакетОформления, ТипГенератораВывода, 
		ПараметрыВывода.ПроверятьДоступностьПолей, ПараметрыВывода.ПараметрыФункциональныхОпций);
    
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(
		МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, 
		ПараметрыВывода.ВозможностьИспользованияВнешнихФункций,
		ПараметрыВывода.ОграничиватьПолучениеПолейПоСсылкамПоПравуПросмотр,
		ПараметрыВывода.МенеджерВременныхТаблиц);
    
    ПроцессорВывода = Неопределено; //ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений, ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент
    
	//Выводим результат
	Если ВыводВКоллекциюЗначений Тогда
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	Иначе
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	КонецЕсли;
    
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

#КонецОбласти

#КонецЕсли