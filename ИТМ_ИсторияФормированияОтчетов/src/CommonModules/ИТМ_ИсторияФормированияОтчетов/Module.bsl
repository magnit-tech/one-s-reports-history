// @strict-types

#Область ПрограммныйИнтерфейс

#Область ЗамерПроизвольногоОтчета

// Начать замер выполнения произвольного отчета.
// Строит структуру, совместимую с БСПшной формой. 
// 
// Параметры:
//  ВыполняемыйОтчет - ОтчетОбъект, Строка - Выполняемый отчет
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
Функция НачатьЗамерВыполненияПроизвольногоОтчета(ВыполняемыйОтчет, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета();
	Параметры.СхемаМодифицирована = Ложь;
	Параметры.СсылкаВарианта      = Неопределено;
	Параметры.КлючСхемы           = "";
	Параметры.КлючВарианта        = "";
	
	Попытка
		
		Если ТипЗнч(ВыполняемыйОтчет) = Тип("Строка") Тогда
			Параметры.ПолноеИмя  = ВыполняемыйОтчет;
			Если СтрРазделить(Параметры.ПолноеИмя, ".", Ложь).Количество() = 1 Тогда
				Параметры.ПолноеИмя = "Отчет." + Параметры.ПолноеИмя;
			КонецЕсли;
		Иначе
			//@skip-check dynamic-access-method-not-found - Баг ЕДТ
			МетаданныеОбъекта = ВыполняемыйОтчет.Метаданные(); //ОбъектМетаданных
			Параметры.ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
			Параметры.НастройкиКД     = ВыполняемыйОтчет.КомпоновщикНастроек.Настройки;
			Параметры.ФиксированныеНастройкиКД = ВыполняемыйОтчет.КомпоновщикНастроек.ФиксированныеНастройки;
			Параметры.ПользовательскиеНастройкиКД = ВыполняемыйОтчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		КонецЕсли;
		
		Параметры.СсылкаОтчета   = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Параметры.ПолноеИмя);
		Параметры.ИмяКлючевойОперации = Параметры.ПолноеИмя + ":Формирование";
	 	
	Исключение
		
		ДобавитьЗаписьВЖурналРегистрации(Параметры, "НачатьЗамерВыполненияПроизвольногоОтчета", ОписаниеОшибки());
		
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(Параметры, ДополнительныеПараметры);
	
	ВариантыОтчетов_СформироватьОтчет_ПередВыполнением(Параметры);
	
	//@skip-check constructor-function-return-section
	Возврат Параметры;
	
КонецФункции

// Завершить замер выполнения произвольного отчета.
// 
// Параметры:
//  Параметры - см. НачатьЗамерВыполненияПроизвольногоОтчета
//  Результат - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета
Процедура ЗавершитьЗамерВыполненияПроизвольногоОтчета(Параметры, Результат = Неопределено) Экспорт
	
	ВариантыОтчетов_СформироватьОтчет_ПослеВыполнения(Параметры, Результат);
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВызываемыеИзТиповыхМодулей

// Использовать историю формирования отчетов.
// 
// Возвращаемое значение:
//  Булево - Использовать историю формирования отчетов
Функция ИспользоватьИсториюФормированияОтчетов() Экспорт
	
	Возврат Истина; //Изначально использовалась константа, но в расширении нельзя было ее создать
	
КонецФункции

// Варианты отчетов сформировать отчет перед выполнением.
// 
// Параметры:
//  Параметры - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
Процедура ВариантыОтчетов_СформироватьОтчет_ПередВыполнением(Параметры) Экспорт
	
	Пока БезопасныйРежим() <> Ложь Цикл
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередПодготовкойВыполнениемОтчета(Параметры, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыИсторииФормированияВПараметрахОтчета(Параметры);
	
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПослеПодготовкиВыполненияОтчета(Параметры);
	
КонецПроцедуры

// Заполнить параметры истории формирования в параметрах отчета.
// 
// Параметры:
//  Параметры - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
Процедура ЗаполнитьПараметрыИсторииФормированияВПараметрахОтчета(Параметры) Экспорт
	
	НастройкиПодсистемы	    = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.НастройкиОтчета(
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СсылкаОтчета"), Истина);
	
	ПараметрыИсторииФормирования = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровИсторииФормирования();
	ПараметрыИсторииФормирования.НачалоФормирования  = ТекущаяДатаСеанса();
	ПараметрыИсторииФормирования.ФиксироватьИсторию  = НастройкиПодсистемы.ФиксироватьИсторию;
	ПараметрыИсторииФормирования.НастройкиПодсистемы = НастройкиПодсистемы;
	
	//@skip-check structure-key-modification
	Параметры.Вставить("ИсторияФормированияОтчетов", ПараметрыИсторииФормирования);
	
КонецПроцедуры

// Вызывается после формирования отчета и производит все действия для истории
// см. ВариантыОтчетов - СформироватьОтчет()
//
// Параметры:
//   Параметры - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
//   Результат - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета
//
Процедура ВариантыОтчетов_СформироватьОтчет_ПослеВыполнения(Параметры, Результат = Неопределено) Экспорт
	
	Пока БезопасныйРежим() <> Ложь Цикл
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередВыполнениемАлгоритмаПослеФормированияОтчета(
		Параметры, Результат, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВеденияИстории = Параметры.ИсторияФормированияОтчетов;
	Если ПараметрыВеденияИстории = Неопределено ИЛИ НЕ ПараметрыВеденияИстории.ФиксироватьИсторию Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьИстории	= ДанныеДляИстории(Параметры, Результат);
	
	Отказ = Ложь;
	ОпределениеНеобходимостиЗаписиВРегистрИстории(Параметры, Результат, ЗаписьИстории, Отказ);
	
	Если НЕ Отказ Тогда
		СтандартнаяОбработка = Истина;
		ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередЗаписьюВРегистрИстории(
			Параметры, Результат, ЗаписьИстории, СтандартнаяОбработка);
		Если СтандартнаяОбработка Тогда
			РегистрыСведений.ИТМ_ИсторияФормированияОтчетов.ЗаписатьДанныеЗаписи(ЗаписьИстории);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавить запись в журнал регистрации.
// 
// Параметры:
//  Параметры - Структура - Параметры
//  ПодИмяСобытия - Строка - Ключ
//  Комментарий - Строка - Комментарий
//  ЭтоОшибка - Булево - Это ошибка
//  Сообщать - Булево - Сообщать
Процедура ДобавитьЗаписьВЖурналРегистрации(Параметры, ПодИмяСобытия, Комментарий, ЭтоОшибка = Истина, Сообщать = Истина) Экспорт

	Пока БезопасныйРежим() <> Ложь Цикл
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытия			= "ИТМ_ИсторияФормированияОтчетов." + ПодИмяСобытия;
	Уровень				= УровеньЖурналаРегистрации[?(ЭтоОшибка, "Ошибка", "Информация")]; //УровеньЖурналаРегистрации
	ОбъектМетаданных	= Метаданные.ОбщиеМодули.ИТМ_ИсторияФормированияОтчетов;
	Данные				= Неопределено;
	КлючВарианта		= "";
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		Если Параметры.Свойство("КлючВарианта") Тогда
			КлючВарианта	= Параметры.КлючВарианта;
		КонецЕсли;
		
		Если Параметры.Свойство("СсылкаВарианта") И ЗначениеЗаполнено(Параметры.СсылкаВарианта) Тогда
			Данные	= Параметры.СсылкаВарианта;
		ИначеЕсли Параметры.Свойство("СсылкаОтчета") И ЗначениеЗаполнено(Параметры.СсылкаОтчета) Тогда
			Данные	= Параметры.СсылкаОтчета;
		Иначе
			Данные	= КлючВарианта;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,Уровень,ОбъектМетаданных,Данные,Комментарий);
	
	Если Сообщать Тогда
		ТекстСообщения = СтрШаблон("%1:%2", ИмяСобытия, Комментарий);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСИсторией

// Формирует структуру с данными, которые будут записаны в регистр истории.
// см. ВариантыОтчетов - СформироватьОтчет()
//
// Параметры:
//   Параметры - См. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
//   Результат - См. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета
//
// Возвращаемое значение:
//   см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов
//
Функция ДанныеДляИстории(Параметры, Результат) Экспорт
	
	ДанныеДляЗаполненияРегистра = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов();
	ДанныеДляЗаполненияРегистра.Успех = Истина;
	
	СтандартнаяОбработка	= Истина;
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередЗаполнениемДанныхДляИстории(Параметры, 
		Результат, ДанныеДляЗаполненияРегистра, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ДанныеДляИстории_СтандартнаяОбработка(Параметры, Результат, ДанныеДляЗаполненияРегистра);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеДляЗаполненияРегистра.ТекстОшибки) Тогда
		ДанныеДляЗаполненияРегистра.Успех = Ложь;
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияРегистра;
	
КонецФункции

// Формирует структуру с данными, которые будут записаны в регистр истории.
// см. ВариантыОтчетов - СформироватьОтчет()
//
// Параметры:
//   Параметры     - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
//   Результат     - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета
//   ЗаписьИстории - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов
//
Процедура ДанныеДляИстории_СтандартнаяОбработка(Параметры, Результат, ЗаписьИстории) Экспорт
	
	Если Параметры.Свойство("Объект") И НЕ Параметры.Объект = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЗаписьИстории, Параметры.Объект);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьИстории, Параметры);
	ЗаполнитьЗначенияСвойств(ЗаписьИстории, Результат);

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();

	ПараметрыВеденияИстории = Параметры.ИсторияФормированияОтчетов;
	ЗаписьИстории.Пользователь = Пользователи.ТекущийПользователь();
	ЗаписьИстории.НачалоФормирования = ПараметрыВеденияИстории.НачалоФормирования;
	ЗаписьИстории.ОкончаниеФормирования = ТекущаяДатаСеанса;
	ЗаписьИстории.НомерСеанса = НомерСеансаИнформационнойБазы();

	ЗаписьИстории.ДлительностьФормирования = Дата(1, 1, 1) + (ЗаписьИстории.ОкончаниеФормирования - ЗаписьИстории.НачалоФормирования);
	
	ИмяКлючевойОперации = "";
	Если Параметры.Свойство("ИмяКлючевойОперации", ИмяКлючевойОперации) И ЗначениеЗаполнено(ИмяКлючевойОперации) Тогда
		ЗаписьИстории.КлючеваяОперация = ОценкаПроизводительностиПовтИсп.ПолучитьКлючевуюОперациюПоИмени(ИмяКлючевойОперации);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗаписьИстории.ПолноеИмя) И ЗначениеЗаполнено(ЗаписьИстории.СсылкаОтчета) 
		И ТипЗнч(ЗаписьИстории.СсылкаОтчета) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ЗаписьИстории.ПолноеИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьИстории.СсылкаОтчета, "ПолноеИмя");
	КонецЕсли;

	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПослеЗаполненияДанныхДляИстории(Параметры, Результат, ЗаписьИстории);
	
КонецПроцедуры

// Проверяет необходимость записи в историю формирования
//
// Параметры:
//   Параметры     - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонПараметровФормированияОтчета
//   Результат     - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета
//   ЗаписьИстории - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов
//   Отказ         - Булево - если Истина, то писаться в историю не будет
//
Процедура ОпределениеНеобходимостиЗаписиВРегистрИстории(Параметры, Результат, ЗаписьИстории, Отказ) Экспорт
	
	СтандартнаяОбработка	= Истина;
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередОпределениемНеобходимостиЗаписиВРегистрИстории(
		Параметры, Результат, ЗаписьИстории, СтандартнаяОбработка, Отказ);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВеденияИстории = Параметры.ИсторияФормированияОтчетов;
	НастройкиПодсистемы = ПараметрыВеденияИстории.НастройкиПодсистемы;
	
	НеобходимоИспользоватьОтборы = НастройкиПодсистемы.ИспользоватьОтборы И НЕ ПараметрыВеденияИстории.ИгнорироватьОтборы;
	
	Если НеобходимоИспользоватьОтборы Тогда
		ОтборыНеобходимостиЗаписи    = НастройкиПодсистемы.ДополнительныеНастройки.Отборы;
		НеобходимоИспользоватьОтборы = НастройкиИмеютОтборы(ОтборыНеобходимостиЗаписи);
	Иначе
		ОтборыНеобходимостиЗаписи = Неопределено;
	КонецЕсли;
	
	Если НЕ НеобходимоИспользоватьОтборы Тогда
		Возврат;
	КонецЕсли;
	
	СхемаОтчетаПроверки	= РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.ПолучитьМакет("ОтборыНеобходимостиЗаписи");
	
	ПередаваемаяТаблица	= Новый ТаблицаЗначений;
	Для Каждого ТекущееПоле Из СхемаОтчетаПроверки.НаборыДанных.Получить(0).Поля Цикл
		ПередаваемаяТаблица.Колонки.Добавить(ТекущееПоле.Поле, ТекущееПоле.ТипЗначения);
	КонецЦикла;
	
	СтрокаДляОтбора	= ПередаваемаяТаблица.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДляОтбора, Параметры);
	ЗаполнитьЗначенияСвойств(СтрокаДляОтбора, ЗаписьИстории);
	
	ВыполняемыеНастройки = СхемаОтчетаПроверки.НастройкиПоУмолчанию;
	ПрименитьОтборыИзНастроекОтчета(ВыполняемыеНастройки, ОтборыНеобходимостиЗаписи);
	
	ВнешниеДанныеОтчета         = Новый Структура(СхемаОтчетаПроверки.НаборыДанных.Получить(0).ИмяОбъекта,ПередаваемаяТаблица);
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;     
	
	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(
		СхемаОтчетаПроверки, ВыполняемыеНастройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанныеОтчета,,Истина);
	
	РезультатОтбора	= Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатОтбора);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Если НЕ ЗначениеЗаполнено(РезультатОтбора) Тогда
		Отказ = Истина;
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область РолеваяМодель

// Есть право просмотр своей истории.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоПросмотрСвоейИстории() Экспорт
	
	Возврат ЕстьПравоАдминистрирования()
		ИЛИ ЕстьПравоПросмотрВсейИстории()
		ИЛИ Пользователи.РолиДоступны(Метаданные.Роли.ИТМ_ПросмотрСвоейИсторииФормированияОтчетов.Имя);

КонецФункции

// Есть право просмотр всей истории.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоПросмотрВсейИстории() Экспорт
	
	Возврат ЕстьПравоАдминистрирования() 
		ИЛИ Пользователи.РолиДоступны(Метаданные.Роли.ИТМ_ПросмотрВсейИсторииФормированияОтчетов.Имя);
		
КонецФункции

// Есть право администрирования.
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоАдминистрирования() Экспорт
	
	Возврат Пользователи.РолиДоступны(Метаданные.Роли.ИТМ_АдминистраторИсторииФормированияОтчетов.Имя);
	
КонецФункции

#КонецОбласти

#Область НастройкаФормПодсистемы

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// см УправляемаяФорма.ПриСозданииНаСервере в синтакс-помощнике и ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
// Параметры:
//   Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыОтчета
//   Отказ - Булево - Признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//   ДополнительныеПараметры - Произвольный
//
// Пример:
//	//Добавление команды с обработчиком в ОтчетыКлиентПереопределяемый.ОбработчикКоманды:
//	Команда = ФормаОтчета.Команды.Добавить("МояОсобеннаяКоманда");
//	Команда.Действие  = "Подключаемый_Команда";
//	Команда.Заголовок = НСтр("ru = 'Моя команда...'");
//	
//	Кнопка = ФормаОтчета.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ФормаОтчета.Элементы.<ИмяПодменю>);
//	Кнопка.ИмяКоманды = Команда.Имя;
//	
//	ФормаОтчета.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
//
Процедура ФормаОтчета_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЕстьПравоПросмотрСвоейИстории() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчета_ДобавитьКомандуИсторияФормированияОтчета(Форма, ДополнительныеПараметры);
	
КонецПроцедуры
	
// Форма списка истории (при создании на сервере)
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыОтчета
//  Отказ - Булево
Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	Если НЕ ЕстьПравоПросмотрСвоейИстории() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	
	ПараметрСписка = ФормаСписка_ПараметрТекущегоПользователя(Форма);
	ПараметрСписка.Значение	= ТекущийПользователь;
	ПараметрСписка.Использование = Истина;
	
	КнопкаТолькоСвои = ФормаСписка_КнопкаТолькоСвои(Форма);
	Если КнопкаТолькоСвои <> Неопределено Тогда
		КнопкаТолькоСвои.Пометка   = Истина;
		КнопкаТолькоСвои.Видимость = ЕстьПравоПросмотрВсейИстории();
	КонецЕсли;
	
	ЕстьПравоАдминистрирования = ЕстьПравоАдминистрирования();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ВыгрузитьВФайл"  , "Видимость", ЕстьПравоАдминистрирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ЗагрузитьИзФайла", "Видимость", ЕстьПравоАдминистрирования);
	
	ФормаСписка_ОбновитьОтображениеФормы(Форма);
	
КонецПроцедуры

// Форма списка (обновить отображение формы)
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
Процедура ФормаСписка_ОбновитьОтображениеФормы(Форма) Экспорт
	
	ПараметрСписка   = ФормаСписка_ПараметрТекущегоПользователя(Форма);
	КнопкаТолькоСвои = ФормаСписка_КнопкаТолькоСвои(Форма);
	Если КнопкаТолькоСвои = Неопределено Тогда
		ПараметрСписка.Использование = Истина;
	Иначе
		ПараметрСписка.Использование = КнопкаТолькоСвои.Пометка;
	КонецЕсли;
	
КонецПроцедуры

// Форма списка (кнопка только свои при нажатии).
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
Процедура ФормаСписка_КнопкаТолькоСвои_ПриНажатии(Форма) Экспорт
	
	КнопкаФормы = ФормаСписка_КнопкаТолькоСвои(Форма);
	Если КнопкаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаФормы.Пометка = НЕ КнопкаФормы.Пометка;
	
	ФормаСписка_ОбновитьОтображениеФормы(Форма);
	
КонецПроцедуры

// Форма списка кнопка только свои.
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
// 
// Возвращаемое значение:
//  КнопкаФормы - :
//  * Пометка - Булево
Функция ФормаСписка_КнопкаТолькоСвои(Форма) Экспорт
	
	Возврат Форма.Элементы.Найти("ТолькоТекущегоПользователя");
		
КонецФункции

#КонецОбласти

#Область Вспомогательные

// Применить отборы из настроек отчета.
// 
// Параметры:
//  НастройкиИсточник - НастройкиКомпоновкиДанных - Настройки источник
//  НастройкиОтборы - НастройкиКомпоновкиДанных - Настройки отборы
Процедура ПрименитьОтборыИзНастроекОтчета(НастройкиИсточник, НастройкиОтборы) Экспорт
	
	СкопироватьЭлементыНастроек(НастройкиИсточник.Отбор, НастройкиОтборы.Отбор);
	
	СкопироватьЭлементыНастроек(НастройкиИсточник.ПользовательскиеПоля, НастройкиОтборы.ПользовательскиеПоля);
	
КонецПроцедуры

// Скопировать элементы настроек.
// 
// Параметры:
// ПриемникЗначения - Произвольный - Приемник
// ИсточникЗначения - Произвольный - Источник значения
// ОчищатьПриемник  - Булево       - Очищать приемник
Процедура СкопироватьЭлементыНастроек(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт
    
    ТипИсточника = ТипЗнч(ИсточникЗначения);
    Если ТипИсточника = Тип("УсловноеОформлениеКомпоновкиДанных")
        ИЛИ ТипИсточника = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
        ИЛИ ТипИсточника = Тип("ОформляемыеПоляКомпоновкиДанных")
        ИЛИ ТипИсточника = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
        СоздаватьПоТипу = Ложь;
    Иначе
        СоздаватьПоТипу = Истина;
    КонецЕсли;
    
    ПриемникЭлементов = ПриемникЗначения.Элементы;
    Если ОчищатьПриемник Тогда
        ПриемникЭлементов.Очистить();
    КонецЕсли;
    ИсточникЭлементов = ИсточникЗначения.Элементы;
    
    Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
        
        ЭлементПриемник = СкопироватьЭлементыНастроек_ЭлементПриемник(
        	ПриемникЭлементов, ИсточникЭлементов, ЭлементИсточник, СоздаватьПоТипу);
        
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        
        // В некоторых коллекциях необходимо заполнить другие коллекции
		СкопироватьЭлементыНастроек_ОбработатьДополнительныеКоллекции(ИсточникЭлементов, ЭлементПриемник, ЭлементИсточник);
        
        // В некоторых элементах коллекции необходимо заполнить другие коллекции
		СкопироватьЭлементыНастроек_ОбработатьДополнительныеЭлементы(ЭлементПриемник, ЭлементИсточник);
        
    КонецЦикла;
    
КонецПроцедуры

// Заполнить элементы настроек.
// 
// Параметры:
//  ПриемникЗначения - ОформлениеКомпоновкиДанных, КоллекцияЗначенийПараметровКомпоновкиДанных, ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных, ЗначенияПараметровДанныхКомпоновкиДанных - Приемник значения
//  ИсточникЗначения - см. ЗаполнитьЭлементыНастроек.ПриемникЗначения
//  ПервыйУровень    - Произвольный - Первый уровень
Процедура ЗаполнитьЭлементыНастроек(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
    
    Перем КоллекцияЗначений; //см. ЗаполнитьЭлементыНастроек.ПриемникЗначения
    
    Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
        КоллекцияЗначений = ИсточникЗначения;
    Иначе
        КоллекцияЗначений = ИсточникЗначения.Элементы;
    КонецЕсли;
    
    Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
        Если ПервыйУровень = Неопределено Тогда
            ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        Иначе
            ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        КонецЕсли;
        Если ЭлементПриемник = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных")
        	И ЗначениеЗаполнено(ЭлементИсточник.ЗначенияВложенныхПараметров) Тогда
            ЗаполнитьЭлементыНастроек(ЭлементПриемник.ЗначенияВложенныхПараметров, 
            	ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

// Настройки имеют отборы.
// 
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
// 
// Возвращаемое значение:
//  Булево
Функция НастройкиИмеютОтборы(Настройки) Экспорт
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Ссылка на общие настройки.
// 
// Возвращаемое значение:
//  СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция СсылкаНаОбщиеНастройки() Экспорт
	
	Возврат Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	
КонецФункции

// Загрузить записи в регистр из текста файла.
// 
// Параметры:
//  ТекстФайла - Строка
Процедура ЗагрузитьЗаписиВРегистрИзТекстаФайла(ТекстФайла) Экспорт
	
	ДанныеФайла = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ЗначениеИзСтрокиXML(ТекстФайла);
	Для Каждого ТекущиеДанные Из ДанныеФайла Цикл //см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов
		РегистрыСведений.ИТМ_ИсторияФормированияОтчетов.ЗаписатьДанныеЗаписи(ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

// Данные записей регистра для сохранения в файл.
// 
// Параметры:
//  ЗаписиРегистра - Массив из РегистрСведенийКлючЗаписи.ИТМ_ИсторияФормированияОтчетов - Записи регистра
// 
// Возвращаемое значение:
//  Строка
Функция ДанныеЗаписейРегистраДляСохраненияВФайл(ЗаписиРегистра) Экспорт
	
	ДанныеРезультата = Новый Массив; //Массив из Структура
	
	Для Каждого КлючЗаписи Из ЗаписиРегистра Цикл
		
		СодержимоеЗаписи = РегистрыСведений.ИТМ_ИсторияФормированияОтчетов.СодержимоеЗаписи(КлючЗаписи);
		ДанныеРезультата.Добавить(СодержимоеЗаписи);
		
	КонецЦикла;
	
	Возврат ИТМ_ИсторияФормированияОтчетовКлиентСервер.ЗначениеВСтрокуXML(ДанныеРезультата);
	
КонецФункции

// Создать общую настройку при отсутствии.
Процедура СоздатьОбщуюНастройкуПриОтсутствии() Экспорт
	
	Пока БезопасныйРежим() <> Ложь Цикл
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбщиеНастройки = СсылкаНаОбщиеНастройки();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.ИТМ_НастройкиИсторииФормированияОтчетов
	|ГДЕ
	|	Отчет = &Отчет");
	Запрос.УстановитьПараметр("Отчет", СсылкаНаОбщиеНастройки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НоваяЗапись = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.СоздатьМенеджерЗаписи();
		НоваяЗапись.Отчет = СсылкаНаОбщиеНастройки;
		НоваяЗапись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Скопировать элементы настроек элемент приемник.
// 
// Параметры:
//  ПриемникЭлементов - ОформлениеКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных, КоллекцияПользовательскихПолейКомпоновкиДанных - Приемник элементов
//  ИсточникЭлементов - ОформлениеКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных, КоллекцияПользовательскихПолейКомпоновкиДанных - Источник элементов
//  ЭлементИсточник - ЭлементПорядкаКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных - Элемент источник
//  СоздаватьПоТипу - Булево - Создавать по типу
// 
// Возвращаемое значение:
//  ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных - Скопировать элементы настроек элемент приемник
Функция СкопироватьЭлементыНастроек_ЭлементПриемник(ПриемникЭлементов, ИсточникЭлементов, ЭлементИсточник, СоздаватьПоТипу)
	
	ТипЭлементаИсточника  = ТипЗнч(ЭлементИсточник);
	ТипПриемникаЭлементов = ТипЗнч(ПриемникЭлементов);
	
	Если ТипЭлементаИсточника = Тип("ЭлементПорядкаКомпоновкиДанных")
		И ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
        // Элементы порядка добавляем в начало
        ЭлементПриемник = ПриемникЭлементов.Вставить(ИсточникЭлементов.Индекс(ЭлементИсточник), ТипЭлементаИсточника);
	ИначеЕсли  СоздаватьПоТипу 
		ИЛИ ТипПриемникаЭлементов = Тип("КоллекцияПользовательскихПолейКомпоновкиДанных")
		ИЛИ ТипПриемникаЭлементов = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЭлементаИсточника);
	Иначе
		//@skip-warning
		ЭлементПриемник = ПриемникЭлементов.Добавить();
	КонецЕсли;
	
	Возврат ЭлементПриемник;
	
КонецФункции

// Скопировать элементы настроек обработать дополнительные коллекции.
// 
// Параметры:
//  ИсточникЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных, КоллекцияПользовательскихПолейКомпоновкиДанных - Источник элементов
//  ЭлементПриемник - ЭлементУсловногоОформленияКомпоновкиДанных, ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных - Элемент приемник
//  ЭлементИсточник - ЭлементУсловногоОформленияКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных - Элемент источник
Процедура СкопироватьЭлементыНастроек_ОбработатьДополнительныеКоллекции(ИсточникЭлементов, ЭлементПриемник, ЭлементИсточник)

	ТипИсточникаЭлементов = ТипЗнч(ИсточникЭлементов);
	
	Если ТипИсточникаЭлементов = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
		СкопироватьЭлементыНастроек(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
		СкопироватьЭлементыНастроек(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		ЗаполнитьЭлементыНастроек(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
	ИначеЕсли ТипИсточникаЭлементов = Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
		СкопироватьЭлементыНастроек(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
	КонецЕсли;
	
КонецПроцедуры

// Скопировать элементы настроек обработать дополнительные элементы.
// 
// Параметры:
//  ЭлементПриемник - ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных - Элемент приемник
//  ЭлементИсточник - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ПользовательскоеПолеВыражениеКомпоновкиДанных, ПользовательскоеПолеВыборКомпоновкиДанных - Элемент источник
Процедура СкопироватьЭлементыНастроек_ОбработатьДополнительныеЭлементы(ЭлементПриемник, ЭлементИсточник)
	
	ТипЭлементаИсточника = ТипЗнч(ЭлементИсточник);
	
	Если ТипЭлементаИсточника = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
        
		СкопироватьЭлементыНастроек(ЭлементПриемник, ЭлементИсточник);
        
	ИначеЕсли ТипЭлементаИсточника = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
        
		СкопироватьЭлементыНастроек(ЭлементПриемник, ЭлементИсточник);
        
	ИначеЕсли ТипЭлементаИсточника = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
        
		СкопироватьЭлементыНастроек(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
        
	ИначеЕсли ТипЭлементаИсточника = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
        
		ЭлементПриемник.УстановитьПредставлениеВыражений(
			ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей(),
			ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей());
        
		ЭлементПриемник.УстановитьВыражения(
			ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей(), 
			ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
        
	КонецЕсли;
	
КонецПроцедуры

// Форма списка параметр текущего пользователя.
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
// 
// Возвращаемое значение:
//  ЗначениеПараметраКомпоновкиДанных -:
//  * Значение - СправочникСсылка.Пользователи
Функция ФормаСписка_ПараметрТекущегоПользователя(Форма)
	
	Возврат Форма.Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущийПользователь"));

КонецФункции

// Форма отчета добавить команду история формирования отчета.
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
//  ДополнительныеПараметры - Произвольный
Процедура ФормаОтчета_ДобавитьКомандуИсторияФормированияОтчета(Форма, ДополнительныеПараметры = Неопределено)
	
	ИмяТекущейКоманды = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ФормаОтчета_ИмяКомандыИсторияФормированияОтчета();
	
	Команда = Форма.Команды.Добавить(ИмяТекущейКоманды);
	Команда.Заголовок   = НСтр("ru = 'История формирования отчета'");
	Команда.Подсказка   = Команда.Заголовок;
	Команда.Картинка    = БиблиотекаКартинок.ХранилищеНастроек;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	
	ФормаОтчета_ДобавитьКоманду(Форма, Команда, ДополнительныеПараметры);
		
КонецПроцедуры

// Форма отчета добавить команду.
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыОтчета
//  Команда - КомандаФормы - Команда
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ФормаОтчета_ДобавитьКоманду(Форма, Команда, ДополнительныеПараметры = Неопределено)
	
	КоманднаяПанель  = Неопределено;
	Команда.Действие = "Подключаемый_Команда";
	
	ИменаВозможныхПанелей    = "ОсновнаяКоманднаяПанель,ГруппаПрочиеКоманды,КоманднаяПанель";
	ВозможныеКомандныеПанели = СтрРазделить(ИменаВозможныхПанелей, ",");
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ВозможнаяКоманднаяПанель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИмяКоманднойПанели");
		Если ТипЗнч(ВозможнаяКоманднаяПанель) = Тип("Строка") Тогда
			ВозможныеКомандныеПанели.Вставить(0, ВозможнаяКоманднаяПанель);
		КонецЕсли;
	КонецЕсли;
	
	ИТМ_ИсторияФормированияОтчетовПереопределяемый.ПередОпределениемКоманднойПанелиОтчета(
		Форма, ВозможныеКомандныеПанели, КоманднаяПанель);
	
	Если КоманднаяПанель = Неопределено Тогда
		Для Каждого ВозможнаяКоманднаяПанель Из ВозможныеКомандныеПанели Цикл
			КоманднаяПанель = Форма.Элементы.Найти(ВозможнаяКоманднаяПанель);
			Если КоманднаяПанель <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоманднаяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), КоманднаяПанель);
	Кнопка.ИмяКоманды = Команда.Имя;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПостоянныеКоманды") Тогда
		Форма.ПостоянныеКоманды.Добавить(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
