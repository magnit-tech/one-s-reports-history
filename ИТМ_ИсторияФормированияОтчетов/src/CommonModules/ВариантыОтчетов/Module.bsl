// @strict-types

#Область ПрограммныйИнтерфейс

// см. ВариантыОтчетов.СформироватьОтчет
&Вместо("СформироватьОтчет")
Функция ИТМ_СформироватьОтчет(Знач Параметры, Знач ПроверятьЗаполнение, Знач ПолучатьФлажокПустой) Экспорт
	
	ИспользоватьИсториюФормированияОтчетов = ИТМ_ИсторияФормированияОтчетов.ИспользоватьИсториюФормированияОтчетов();
	
	Если НЕ ИспользоватьИсториюФормированияОтчетов Тогда
		Возврат ПродолжитьВызов(Параметры, ПроверятьЗаполнение, ПолучатьФлажокПустой);
	КонецЕсли;
	
	Попытка
		ИТМ_ИсторияФормированияОтчетов.ВариантыОтчетов_СформироватьОтчет_ПередВыполнением(Параметры);
	Исключение
		ИТМ_ИсторияФормированияОтчетов.ДобавитьЗаписьВЖурналРегистрации(
			Параметры, "ВариантыОтчетов_СформироватьОтчет_ПередВыполнением", ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Результат = ПродолжитьВызов(Параметры, ПроверятьЗаполнение, ПолучатьФлажокПустой);
	Исключение
		Результат = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонРезультатВыполненияОтчета();
		Результат.ТекстОшибки = ОписаниеОшибки();
		Результат.ВызватьИсключение = Истина;
		//@skip-check bsl-legacy-check-static-feature-access
		Результат.ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Попытка
		ИТМ_ИсторияФормированияОтчетов.ВариантыОтчетов_СформироватьОтчет_ПослеВыполнения(Параметры, Результат);
	Исключение
		ИТМ_ИсторияФормированияОтчетов.ДобавитьЗаписьВЖурналРегистрации(
			Параметры, "ВариантыОтчетов_СформироватьОтчет_ПослеВыполнения", ОписаниеОшибки());
	КонецПопытки;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ВызватьИсключение", Ложь) Тогда
		ВызватьИсключение Результат.ТекстИсключения;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти
