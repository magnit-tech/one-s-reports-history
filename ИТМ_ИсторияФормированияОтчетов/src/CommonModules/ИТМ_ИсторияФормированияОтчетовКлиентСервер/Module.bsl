// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ОписанияТипов

// Параметры формирования отчета. 
// Параметры, которые прилетают в метод ВариантыОтчетов.СформироватьОтчет()
// Дополняются дополнительно структурой ИсторияФормированияОтчетов
// 
// Возвращаемое значение:
//  Структура - Параметры формирования отчета:
// * ИсторияФормированияОтчетов - см. ШаблонПараметровИсторииФормирования
// * Объект - Неопределено, ОтчетОбъект - 
// * ПолноеИмя - Строка
// * ИмяКлючевойОперации - Неопределено, Строка - 
// * КомментарийКлючевойОперации - Неопределено, Строка - 
// * КлючВарианта - Неопределено, Строка -
// * КлючСхемы - Неопределено, Строка -
// * НастройкиКД - Неопределено, НастройкиКомпоновкиДанных -
// * ПользовательскиеНастройкиКД - Неопределено, ПользовательскиеНастройкиКомпоновкиДанных -
// * СсылкаВарианта - Неопределено, СправочникСсылка.ВариантыОтчетов -
// * СсылкаОтчета - Неопределено, СправочникСсылка.ДополнительныеОтчетыИОбработки, СправочникСсылка.ИдентификаторыОбъектовМетаданных -
// * СхемаМодифицирована - Булево - 
// * ФиксированныеНастройкиКД - Неопределено, НастройкиКомпоновкиДанных -
// * ДополнительныеСвойства - Неопределено, Структура -
Функция ШаблонПараметровФормированияОтчета() Экспорт
	
	Результат = Новый Структура;
	
	//Параметры истории
	Результат.Вставить("ИсторияФормированияОтчетов", Неопределено);
	
	//Параметры из ВариантыОтчетов.СформироватьОтчет
	Результат.Вставить("Объект", Неопределено);
	Результат.Вставить("ПолноеИмя", "");
	Результат.Вставить("ИмяКлючевойОперации", Неопределено);
	Результат.Вставить("КомментарийКлючевойОперации", Неопределено);
	Результат.Вставить("КлючВарианта", Неопределено);
	Результат.Вставить("КлючСхемы", Неопределено);
	Результат.Вставить("НастройкиКД", Неопределено);
	Результат.Вставить("ПользовательскиеНастройкиКД", Неопределено);
	Результат.Вставить("СсылкаВарианта", Неопределено);
	Результат.Вставить("СсылкаОтчета", Неопределено);
	Результат.Вставить("СхемаМодифицирована", Ложь);
	Результат.Вставить("ФиксированныеНастройкиКД", Неопределено);
	Результат.Вставить("ДополнительныеСвойства", Неопределено);
	
	//@skip-check constructor-function-return-section - ЕДТ не дает указать Неопределено + см
	Возврат Результат;
	
КонецФункции

// Параметры истории формирования.
// 
// Возвращаемое значение:
//  Структура - Параметры истории формирования:
// * НачалоФормирования - Дата - Начало формирования отчета
// * ФиксироватьИсторию - Булево - Стоит ли фиксировать текущее формирование
// * ИгнорироватьОтборы - Булево - Игнорировать ли отборы из настроек
// * ДополнительныеПараметры - Структура - Произвольная структура
// * НастройкиПодсистемы - см. ШаблонНастроекПодсистемы
Функция ШаблонПараметровИсторииФормирования() Экспорт
	
	ПараметрыИсторииФормирования = Новый Структура;
	ПараметрыИсторииФормирования.Вставить("НачалоФормирования"		, '00010101');
	ПараметрыИсторииФормирования.Вставить("ФиксироватьИсторию"	    , Ложь);
	ПараметрыИсторииФормирования.Вставить("ИгнорироватьОтборы"      , Ложь);
	ПараметрыИсторииФормирования.Вставить("ДополнительныеПараметры"	, Новый Структура);
	ПараметрыИсторииФормирования.Вставить("НастройкиПодсистемы"		, Новый Структура);

	Возврат ПараметрыИсторииФормирования;
	
КонецФункции

// Шаблон настроек подсистемы.
// 
// Возвращаемое значение:
//  Структура - Шаблон настроек подсистемы:
// * ФиксироватьИсторию - Булево - Стоит ли фиксировать историю по отчету
// * ИспользоватьОтборы - Булево - Использовать ли проверку по отборам из дополнительных параметров
// * ДополнительныеНастройки - см. ШаблонДополнительныхНастроекПодсистемы
Функция ШаблонНастроекПодсистемы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФиксироватьИсторию", Ложь);
	Результат.Вставить("ИспользоватьОтборы", Ложь);
	Результат.Вставить("ДополнительныеНастройки", ШаблонДополнительныхНастроекПодсистемы());
	
	Возврат Результат;
	
КонецФункции

// Шаблон дополнительных настроек подсистемы.
// 
// Возвращаемое значение:
//  Структура - :
// * Отборы - НастройкиКомпоновкиДанных, Неопределено - Отборы для проверки необходимости записи истории
Функция ШаблонДополнительныхНастроекПодсистемы() Экспорт
	
	Возврат Новый Структура("Отборы", Неопределено);
	
КонецФункции

// Шаблон результат выполнения отчета
// В описании указаны не все свойства. Подробнее см. ВариантыОтчетов.СформироватьОтчет
// 
// Возвращаемое значение:
//  Структура - Шаблон результат выполнения отчета:
// * ТекстОшибки - Строка
// * ВызватьИсключение - Булево
// * ТекстИсключения - Строка
Функция ШаблонРезультатВыполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ВызватьИсключение", Ложь);
	Результат.Вставить("ТекстИсключения", "");
	
	Возврат Результат;
	
КонецФункции

// Шаблон записи истории формирования отчетов.
// 
// Возвращаемое значение:
//  Структура - Шаблон записи истории формирования отчетов:
// * ПолноеИмя - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.ПолноеИмя
// * НачалоФормирования - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.НачалоФормирования
// * КлючВарианта - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.КлючВарианта
// * Пользователь - Неопределено, СправочникСсылка.Пользователи -
// * НомерСеанса - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.НомерСеанса
// * НастройкиКД - Неопределено, НастройкиКомпоновкиДанных -
// * ПользовательскиеНастройкиКД - Неопределено, ПользовательскиеНастройкиКомпоновкиДанных -
// * СсылкаВарианта - Неопределено, СправочникСсылка.ВариантыОтчетов -
// * СсылкаОтчета - Неопределено, СправочникСсылка.ДополнительныеОтчетыИОбработки, СправочникСсылка.ИдентификаторыОбъектовМетаданных -
// * ТекстОшибки - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.ТекстОшибки
// * Успех - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.Успех
// * ОкончаниеФормирования - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.ОкончаниеФормирования
// * ДлительностьФормирования - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.ДлительностьФормирования
// * Комментарий - см. РегистрСведений.ИТМ_ИсторияФормированияОтчетов.Комментарий
// * ИспользуемоеИмяФайла - Строка -
// * КлючеваяОперация - Неопределено, СправочникСсылка.КлючевыеОперации -
// * ДополнительныеСвойства - Неопределено -
Функция ШаблонЗаписиИсторииФормированияОтчетов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмя", "");
	Результат.Вставить("НачалоФормирования", '0001 01 01');
	Результат.Вставить("КлючВарианта", "");
	Результат.Вставить("Пользователь", Неопределено);
	Результат.Вставить("НомерСеанса", 0);
	Результат.Вставить("НастройкиКД", Неопределено);
	Результат.Вставить("ПользовательскиеНастройкиКД", Неопределено);
	Результат.Вставить("СсылкаВарианта", Неопределено);
	Результат.Вставить("СсылкаОтчета", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ОкончаниеФормирования", '0001 01 01');
	Результат.Вставить("ДлительностьФормирования", '0001 01 01');
	Результат.Вставить("Комментарий", "");
	Результат.Вставить("ИспользуемоеИмяФайла", "");
	Результат.Вставить("КлючеваяОперация", Неопределено);
	Результат.Вставить("ДополнительныеСвойства", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Описание общей формы отчета.
// Описаны используемые свойства
// 
// Параметры:
//  ФормаОтчета - см. ОбщаяФорма.ФормаОтчета
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - :
//  * КлючТекущегоВарианта - Строка
//  * ПостоянныеКоманды - Массив из Строка
//  * НастройкиОтчета - Структура -:
//  ** ПолноеИмя - Строка
Функция ОписаниеФормыОтчета(ФормаОтчета) Экспорт
	
	Возврат ФормаОтчета;
	
КонецФункции

// Описание формы списка.
// 
// Параметры:
//  Форма - см. ОписаниеФормыСпискаИстории
// 
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения - :
//  * Список - ДинамическийСписок
Функция ОписаниеФормыСпискаИстории(Форма) Экспорт
	
	Возврат Форма;
	
КонецФункции

#КонецОбласти

#Область ПрименениеНастроек

// Применить все настройки завершение.
// 
// Параметры:
//  ФормаОтчета - см. ОбщаяФорма.ФормаОтчета
//  КлючЗаписиРегистра - РегистрСведенийКлючЗаписи.ИТМ_ИсторияФормированияОтчетов
//  СодержимоеЗаписи - см. ИТМ_ИсторияФормированияОтчетовВызовСервера.СодержимоеЗаписи
Процедура ПрименитьВсеНастройкиЗавершение(ФормаОтчета, КлючЗаписиРегистра, Знач СодержимоеЗаписи = Неопределено) Экспорт
	
	Если СодержимоеЗаписи = Неопределено Тогда
		СодержимоеЗаписи = ИТМ_ИсторияФормированияОтчетовВызовСервера.СодержимоеЗаписи(КлючЗаписиРегистра);
	КонецЕсли;
	
	Если СодержимоеЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СодержимоеЗаписи.Вставить("Переформировать", Ложь);
	
	ОписанияОшибок     = Новый Массив; //Массив из Строка
	ОтчетСодержитМетод = Истина;
	
	Попытка
		//@skip-warning - ЕДТ не видит метод
		ФормаОтчета.ВсеНастройкиЗавершение(СодержимоеЗаписи, Новый Структура);
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		Если Найти(ТекстСообщения, "Метод объекта не обнаружен (ВсеНастройкиЗавершение)") > 0 Тогда
			ОтчетСодержитМетод = Ложь;
		Иначе
			ОписанияОшибок.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	Если НЕ ОтчетСодержитМетод Тогда
		Попытка
			ПрименитьВсеНастройкиЗавершениеДляПростогоОтчета(ФормаОтчета, СодержимоеЗаписи);
		Исключение
			ОписанияОшибок.Добавить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписанияОшибок) Тогда
		
		ТекстСообщения = СтрШаблон(
		"Не удалось применить настройки отчету по причине: 
		|%1", СтрСоединить(ОписанияОшибок, Символы.ПС));
		
		ИТМ_ИсторияФормированияОтчетовВызовСервера.ДобавитьЗаписьВЖурналРегистрации(
			СодержимоеЗаписи, "ПрименитьВсеНастройкиЗавершение", ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Применить все настройки завершение для простого отчета.
// 
// Параметры:
//  ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета
//  ПараметрыЗаполнения - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонЗаписиИсторииФормированияОтчетов
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
Процедура ПрименитьВсеНастройкиЗавершениеДляПростогоОтчета(
	ФормаОтчета, ПараметрыЗаполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	НастройкиКД = Неопределено; //НастройкиКомпоновкиДанных
	ФиксированныеНастройкиКД = Неопределено; //НастройкиКомпоновкиДанных
	ПользовательскиеНастройкиКД = Неопределено; //ПользовательскиеНастройкиКомпоновкиДанных
	
	Если ПараметрыЗаполнения.Свойство("ФиксированныеНастройкиКД", ФиксированныеНастройкиКД) 
		И ФиксированныеНастройкиКД <> Неопределено Тогда
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("НастройкиКД", НастройкиКД) И НастройкиКД <> Неопределено Тогда
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД", ПользовательскиеНастройкиКД) 
		И ПользовательскиеНастройкиКД <> Неопределено Тогда
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	ФормаОтчета.КлючТекущегоВарианта = ПараметрыЗаполнения.КлючВарианта;
		
КонецПроцедуры

// Описание системного типа ЗначениеПараметраКомпоновкиДанных
// 
// Параметры:
//  Значение - ЗначениеПараметраКомпоновкиДанных
// 
// Возвращаемое значение:
//  ЗначениеПараметраКомпоновкиДанных -:
//  * Значение - Произвольный
Функция ЗначениеПараметраКомпоновкиДанных(Значение) Экспорт
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

// Имя события загрузки записей из файла.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияЗагрузкиЗаписейИзФайла() Экспорт
	
	Возврат "ЗагрузкаЗаписейИсторииФормированияОтчетов";
	
КонецФункции

// Форма отчета имя команды история формирования отчета.
// 
// Возвращаемое значение:
//  Строка
Функция ФормаОтчета_ИмяКомандыИсторияФормированияОтчета() Экспорт
	
	Возврат "ИсторияФормированияОтчета";
	
КонецФункции

// Возвращает значение в виде JSON-строки.
// Преобразованы в JSON-строку (сериализованы) могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный - Значение, которое необходимо сериализовать в JSON-строку.
//
// Возвращаемое значение:
//   Строка - JSON-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуJSON(Значение) Экспорт
    
    #Если ВебКлиент Тогда
        
        Возврат ИТМ_ИсторияФормированияОтчетовВызовСервера.ЗначениеВСтрокуJSON(Значение);
        
    #Иначе
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Значение);
        
        Возврат ЗаписьJSON.Закрыть();
        
    #КонецЕсли
    
КонецФункции

// Возвращает значение, полученное из JSON-строки. 
// Получены из JSON-строки могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// 	СтрокаJSON - строка - представления значения в сериализованном виде.
// 	ПрочитатьВСоответствие - булево
//
// Возвращаемое значение:
// Произвольный - Значение, полученное из переданной JSON-строки.
//
Функция ЗначениеИзСтрокиJSON(СтрокаJSON, ПрочитатьВСоответствие = Ложь) Экспорт
	
	#Если ВебКлиент Тогда
	    
	    Возврат ИТМ_ИсторияФормированияОтчетовВызовСервера.ЗначениеИзСтрокиJSON(СтрокаJSON, ПрочитатьВСоответствие);
	    
	#Иначе
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        
        Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
        
    #КонецЕсли
    
КонецФункции

// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный - Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//   Строка - XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
    
    #Если ВебКлиент Тогда
        
        Возврат ИТМ_ИсторияФормированияОтчетовВызовСервера.ЗначениеВСтрокуXML(Значение);
        
    #Иначе
        
        ЗаписьXML = Новый ЗаписьXML;
	    ЗаписьXML.УстановитьСтроку();
	    СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	    Возврат ЗаписьXML.Закрыть();
	    
    #КонецЕсли
	
КонецФункции

// Возвращает значение, полученное из XML-строки. 
// Получены из XML-строки могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// СтрокаXML - строка - представления значения в сериализованном виде.
//
// Возвращаемое значение:
// Произвольный - Значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
    
    #Если ВебКлиент Тогда
        
        Возврат ИТМ_ИсторияФормированияОтчетовВызовСервера.ЗначениеИзСтрокиXML(СтрокаXML);
        
    #Иначе
        
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(СтрокаXML);
        
        Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
    #КонецЕсли
    
КонецФункции

#КонецОбласти

#КонецОбласти
