// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаОтчета
	
// Форма отчета обработчик команды.
// 
// Параметры:
//  ФормаОтчета - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыОтчета
//  Команда - КомандаФормы - Команда
//  Результат - Булево - Результат
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ФормаОтчета_ОбработчикКоманды(ФормаОтчета, Команда,
	Результат = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКомандыИсторияФормированияОтчета = 
	ИТМ_ИсторияФормированияОтчетовКлиентСервер.ФормаОтчета_ИмяКомандыИсторияФормированияОтчета();
	
	ИмяТекущейКоманды = Команда.Имя;
	Если ИмяТекущейКоманды = ИмяКомандыИсторияФормированияОтчета Тогда
		ФормаОтчета_ОбработчикКомандыИсторияФормированияОтчета(ФормаОтчета, Команда, Результат, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Форма отчета обработчик команды история формирования отчета.
// 
// Параметры:
//  ФормаОтчета - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыОтчета
//  Команда - КомандаФормы - Команда
//  Результат - Булево - Результат
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
Процедура ФормаОтчета_ОбработчикКомандыИсторияФормированияОтчета(ФормаОтчета, Команда, 
	Результат = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Истина;
	
	ОтборСтрок = Новый Структура("ПолноеИмя,КлючВарианта", "", Неопределено);
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ДополнительныеПараметры);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборСтрок.ПолноеИмя) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "НастройкиОтчета") Тогда
			ОтборСтрок.ПолноеИмя = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
		Иначе
			ИмяФормыСоставное    = СтрРазделить(ФормаОтчета.ИмяФормы, ".", Ложь);
			ОтборСтрок.ПолноеИмя = СтрШаблон("%1.%2", ИмяФормыСоставное[0], ИмяФормыСоставное[1]);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборСтрок.КлючВарианта) Тогда
		ОтборСтрок.КлючВарианта	= ФормаОтчета.КлючТекущегоВарианта;
	КонецЕсли;
		
	ОткрытьФорму("РегистрСведений.ИТМ_ИсторияФормированияОтчетов.Форма.ФормаВыбора", 
		Новый Структура("Отбор", ОтборСтрок), ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСписка
	
// Форма списка обработка оповещения.
// 
// Параметры:
//  Форма - см. ИТМ_ИсторияФормированияОтчетовКлиентСервер.ОписаниеФормыСпискаИстории
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
Процедура ФормаСписка_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ИмяСобытияЗагрузкиЗаписейИзФайла() Тогда
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные
	
// Открыть отчет по записи регистра.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Эта форма
//  КлючЗаписиРегистра - РегистрСведенийКлючЗаписи.ИТМ_ИсторияФормированияОтчетов - Ключ записи регистра
Процедура ОткрытьОтчетПоЗаписиРегистра(Форма, КлючЗаписиРегистра) Экспорт
	
	СодержимоеЗаписи = ИТМ_ИсторияФормированияОтчетовВызовСервера.СодержимоеЗаписи(КлючЗаписиРегистра);
	
	ИменаСвойств = "ФиксированныеНастройки,Настройки,ПользовательскиеНастройки";
	ПеребираемыеСвойства = СтрРазделить(ИменаСвойств, ",");
	Для Каждого ТекущееСвойство Из ПеребираемыеСвойства Цикл
		ТекущееЗначение = Неопределено;
		Если СодержимоеЗаписи.Свойство(ТекущееСвойство + "КД", ТекущееЗначение) Тогда
			СодержимоеЗаписи.Вставить(ТекущееСвойство, ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ФормаОтчета = ОткрытьФорму(СодержимоеЗаписи.ПолноеИмя + ".Форма", СодержимоеЗаписи, Форма, Форма.УникальныйИдентификатор);
	ИТМ_ИсторияФормированияОтчетовКлиентСервер.ПрименитьВсеНастройкиЗавершение(ФормаОтчета, КлючЗаписиРегистра, СодержимоеЗаписи);
	
КонецПроцедуры

// Выбрать файл загрузки записей регистра.
// 
// Параметры:
//  ВыбранныеФайлы - Null, Массив из Строка - Выбранные файлы
//  ДополнительныеПараметры - Неопределено, Произвольный - Дополнительные параметры
Процедура ВыбратьФайлЗагрузкиЗаписейРегистра(ВыбранныеФайлы = Null, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Null Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Файлы истории в xml (*.xml)|*.xml|";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыбратьФайлЗагрузкиЗаписейРегистра", ЭтотОбъект, ДополнительныеПараметры));
		
	ИначеЕсли ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		
		ФайлДанных  = ВыбранныеФайлы[0];
		ДанныеФайла = Новый ТекстовыйДокумент;
		ДанныеФайла.Прочитать(ФайлДанных);
		ИТМ_ИсторияФормированияОтчетовВызовСервера.ЗагрузитьЗаписиВРегистрИзТекстаФайла(ДанныеФайла.ПолучитьТекст());
		Оповестить(ИТМ_ИсторияФормированияОтчетовКлиентСервер.ИмяСобытияЗагрузкиЗаписейИзФайла());
		
	КонецЕсли;
	
КонецПроцедуры

// Выбрать файл сохранения записей регистра.
// 
// Параметры:
//  ВыбранныеФайлы - Null, Массив из Строка - Выбранные файлы
//  ДополнительныеПараметры - см. ПараметрыЗаписиВФайл
Процедура ВыбратьФайлСохраненияЗаписейРегистра(ВыбранныеФайлы = Null, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Null Тогда
		
		ДиалогВыбораФайла	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр = "Файлы истории в xml (*.xml)|*.xml|";
		//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыбратьФайлСохраненияЗаписейРегистра", ЭтотОбъект, ДополнительныеПараметры));
		
	ИначеЕсли ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		
		ФайлДляСохранения   = ВыбранныеФайлы[0];
		ВыгрузитьЗаписиРегистраВФайл(ДополнительныеПараметры.ЗаписиРегистра, ФайлДляСохранения);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Выгрузить записи регистра в файл.
// 
// Параметры:
//  ЗаписиРегистра - Массив из РегистрСведенийКлючЗаписи.ИТМ_ИсторияФормированияОтчетов - Записи регистра
//  ИмяФайла - Строка - Имя файла
Процедура ВыгрузитьЗаписиРегистраВФайл(ЗаписиРегистра, ИмяФайла = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗаписиРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ВыбратьФайлСохраненияЗаписейРегистра(Null, ПараметрыЗаписиВФайл(ЗаписиРегистра));
	Иначе
		ДанныеДляСохранения = ИТМ_ИсторияФормированияОтчетовВызовСервера.ДанныеЗаписейРегистраДляСохраненияВФайл(ЗаписиРегистра);
		СохраняемыйТекст    = Новый ТекстовыйДокумент;
		СохраняемыйТекст.УстановитьТекст(ДанныеДляСохранения);
		СохраняемыйТекст.НачатьЗапись(, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры записи в файл.
// 
// Параметры:
//  ЗаписиРегистра - см. ВыгрузитьЗаписиРегистраВФайл.ЗаписиРегистра
// 
// Возвращаемое значение:
//  Структура - :
// * ЗаписиРегистра - см. ВыгрузитьЗаписиРегистраВФайл.ЗаписиРегистра
Функция ПараметрыЗаписиВФайл(ЗаписиРегистра)
	
	Возврат Новый Структура("ЗаписиРегистра", ЗаписиРегистра);
	
КонецФункции

#КонецОбласти
