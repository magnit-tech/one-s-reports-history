// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		ИТМ_ИсторияФормированияОтчетов.СоздатьОбщуюНастройкуПриОтсутствии();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	СхемаКомпоновкиДанных	= РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.ПолучитьМакет("ОтборыНеобходимостиЗаписи");
	АдресСхемыКомпоновки	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроекПоУмолчанию.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	КомпоновщикНастроекПоУмолчанию.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаписьФиксироватьИсториюПриИзменении(Элемент)
	
	СохранитьТекущуюЗапись();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборыПриИзменении(Элемент)
	
	СохранитьТекущуюЗапись();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	СохранитьТекущуюЗапись();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекНастройкиПользовательскиеПоля

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПользовательскиеПоляПриИзменении(Элемент)
	
	СохранитьТекущуюЗапись();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьТекущуюСтраницу(ЭтотОбъект, Элементы.СтраницаПустая);
	ПодключитьОбработчикОжидания("ОбработатьИзменениеТекущейСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Отчет.Пустая() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыВыбора.Отбор.Вставить("БезДанных", Истина);
	ПараметрыВыбора.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыОповещения = Новый Структура("Копирование", Копирование);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ДобавитьНастройкуПоОтчету", ЭтотОбъект, ПараметрыОповещения);
	
	//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
	ОткрытьФорму("РегистрСведений.ИТМ_НастройкиИсторииФормированияОтчетов.Форма.ФормаВыбораОтчета",ПараметрыВыбора,
		ЭтотОбъект,,,,  ОписаниеОповещения ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда_СохранитьНастройки(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьТекущуюЗапись()
	
	Если НЕ ЗначениеЗаполнено(АктивнаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Запись);
	
	ДополнительныеНастройки = ИТМ_ИсторияФормированияОтчетовКлиентСервер.ШаблонДополнительныхНастроекПодсистемы();
	ДополнительныеНастройки.Отборы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗаписьРегистра.ДополнительныеНастройки = Новый ХранилищеЗначения(ДополнительныеНастройки);
	
	ЗаписьРегистра.Записать(Истина);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

// Добавить настройку по отчету.
// 
// Параметры:
//  РезультатЗакрытия - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ДобавитьНастройкуПоОтчету(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") 
		ИЛИ РезультатЗакрытия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуПоОтчетуНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

// Добавить настройку по отчету на сервере.
// 
// Параметры:
//  СсылкаНаОтчет - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ДополнительныеПараметры - Структура
&НаСервере
Процедура ДобавитьНастройкуПоОтчетуНаСервере(СсылкаНаОтчет, ДополнительныеПараметры)
	
	ЭтоКопирование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Копирование", Ложь);
	
	НоваяЗапись = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Отчет = СсылкаНаОтчет;
	НоваяЗапись.Записать(Истина);
	
	КлючТекущейЗаписи = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.СоздатьКлючЗаписи(Новый Структура("Отчет", СсылкаНаОтчет));
	Если ЭтоКопирование Тогда
		АктивнаяСтрока = КлючТекущейЗаписи;
		Запись.Отчет   = СсылкаНаОтчет;
		СохранитьТекущуюЗапись();
		АктивнаяСтрока = Неопределено;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = КлючТекущейЗаписи;
	
КонецПроцедуры

// Обработать изменение текущей строки.
&НаКлиенте
Процедура ОбработатьИзменениеТекущейСтроки() Экспорт
	
	Если АктивнаяСтрока = Элементы.Список.ТекущаяСтрока Тогда
		УстановитьТекущуюСтраницу(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеТекущейСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТекущейСтрокиНаСервере()
	
	ТекущаяАктивнаяСтрока = Элементы.Список.ТекущаяСтрока; //РегистрСведенийКлючЗаписи.ИТМ_НастройкиИсторииФормированияОтчетов
	АктивнаяСтрока = ТекущаяАктивнаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяАктивнаяСтрока) Тогда
		
		НастройкиОтчета = РегистрыСведений.ИТМ_НастройкиИсторииФормированияОтчетов.НастройкиОтчета(ТекущаяАктивнаяСтрока.Отчет, Ложь);
		ЗаполнитьЗначенияСвойств(Запись, НастройкиОтчета);
		Запись.Отчет = ТекущаяАктивнаяСтрока.Отчет;
		
		ОтборыНеобходимостиЗаписи = НастройкиОтчета.ДополнительныеНастройки.Отборы;
		
		Если ТипЗнч(ОтборыНеобходимостиЗаписи) = Тип("НастройкиКомпоновкиДанных") Тогда
			ИТМ_ИсторияФормированияОтчетов.ПрименитьОтборыИзНастроекОтчета(КомпоновщикНастроек.Настройки, ОтборыНеобходимостиЗаписи);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроекПоУмолчанию.Настройки);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма, Знач ТекущаяСтраница = Неопределено)
	
	Если ТекущаяСтраница = Неопределено Тогда
		//@skip-warning - баг ЕДТ. Ругается на произвольный тип реквизита формы, но никак типизировать его нельзя
		ИмяСтраницы = ?(Форма.АктивнаяСтрока = Неопределено, "СтраницаПустая", "СтраницаНастроек");
		ТекущаяСтраница = Форма.Элементы[ИмяСтраницы];
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
		"СтраницыНастройкиОтчета", "ТекущаяСтраница", ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти
